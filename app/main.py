# main.py
import os
from app.analyzer import DataAnalyzer
from app.models.model_factory import get_model_loader
from app.data_load import DataLoader
from app.core.config import settings

os.environ["OPENAI_API_KEY"] = settings.OPENAI_API_KEY
def main():

    model = get_model_loader(settings.USE_OPENAI, api_key=settings.OPENAI_API_KEY)
    data_loader = DataLoader(settings.PATH_TO_DATA)
    analyzer = DataAnalyzer(model, data_loader=data_loader)
    
    print("üìä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö!")
    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –∏–ª–∏ 'exit', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.\n")
    while True:
        user_input = input(" –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å: ").strip()

        if user_input.lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"):
            print("\n –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        print("\n –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...\n")
        try:
            answer = analyzer.ask(user_input)
        except Exception as e:
            answer = "–ú–æ–¥–µ–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        print(f"{answer}\n")

if __name__ == "__main__":
    main()