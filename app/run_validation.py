import pandas as pd

from app.analyzer import DataAnalyzer
from app.core.config import settings
from app.data_load import DataLoader
from app.models.model_factory import get_model_loader
import jsonlines
import json
import re

def execute_code(code_str, verbose=False):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python-–∫–æ–¥–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result.
    """
    globals_dict = {}
    locals_dict = {}

    try:
        exec(code_str, globals_dict, locals_dict)
        result = locals_dict.get("result", None)
        if verbose:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return None

def load_jsonl(file_path):
    with jsonlines.open(file_path) as reader: 
        data = [obj for obj in reader]
    return data

def load_validation_answers(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data

def compare_results(predicted, expected):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–∏—Å–ª–∞.
    """
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ float
        predicted_num = float(str(predicted).strip('%').replace(',', '.')) if predicted else None
        expected_num = float(str(expected).strip('%').replace(',', '.')) if expected else None
        return abs(predicted_num - expected_num) < 1e-2
    except:
        # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        return str(predicted).strip() == str(expected).strip()

def extract_numbers(text):
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–∏—Å–ª–∞, –≤–∫–ª—é—á–∞—è –¥—Ä–æ–±–Ω—ã–µ
    return list(map(float, re.findall(r"[-+]?\d*\.\d+|\d+", text)))

def evaluate_answers(history_data, validation_data):
    correct_count = 0
    total_count = 0

    for entry in history_data:
        question = entry["question"]
        generated_code = entry["code"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        if question not in validation_data:
            print(f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {question}")
            continue

        reference_code = validation_data[question]
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å: {question}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        generated_result = execute_code(generated_code)
        expected_result = execute_code(reference_code)

        print(f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {generated_result}')
        if generated_result.find(":") != -1:
            generated_result = generated_result.split(":", 1)[1]
            
        generated_result = extract_numbers(generated_result)[0]
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        match = compare_results(generated_result, expected_result)

        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {generated_result}")
        print(f"–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_result}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {'‚úÖ' if match else '‚ùå'}")

        total_count += 1
        if match:
            correct_count += 1

    accuracy = correct_count / total_count if total_count > 0 else 0
    print(f"\nüìä –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%} ({correct_count}/{total_count})")
    return accuracy


if __name__ == "__main__":
    history_data = load_jsonl("./data/history.json")
    validation_data = load_validation_answers("./data/validate_answer.json")

    evaluate_answers(history_data, validation_data)

