import json
import re

import jsonlines


def execute_code(code_str, verbose=False):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É Python-–∫–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ –ø–µ—Å–æ—á–Ω–∏—Ü—ã.

    Parameters
    ----------
    code_str : str
        –°—Ç—Ä–æ–∫–∞ —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –∫–æ–¥–æ–º.
    verbose : bool, optional
        –ï—Å–ª–∏ True, –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å, by default False

    Returns
    -------
    Any or None
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    globals_dict = {}
    locals_dict = {}

    try:
        exec(code_str, globals_dict, locals_dict)
        result = locals_dict.get("result", None)
        if verbose:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return None


def load_jsonl(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSONL-—Ñ–∞–π–ª (–ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É).

    Parameters
    ----------
    file_path : str
        –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤.

    Returns
    -------
    list of dict
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å.
    """
    with jsonlines.open(file_path) as reader:
        data = [obj for obj in reader]
    return data


def load_validation_answers(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞.

    Parameters
    ----------
    file_path : str
        –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.

    Returns
    -------
    dict
        –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äî –≤–æ–ø—Ä–æ—Å, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –∫–æ–¥.
    """
    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data


def compare_results(predicted, expected):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî —á–∏—Å–ª–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é.

    Parameters
    ----------
    predicted : Any
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    expected : Any
        –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    Returns
    -------
    bool
        True, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç; –∏–Ω–∞—á–µ False.
    """
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ float
        predicted_num = (
            float(str(predicted).strip("%").replace(",", "."))
            if predicted
            else None
        )
        expected_num = (
            float(str(expected).strip("%").replace(",", "."))
            if expected
            else None
        )
        return abs(predicted_num - expected_num) < 1e-2
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        return str(predicted).strip() == str(expected).strip()


def extract_numbers(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏.

    Parameters
    ----------
    text : str
        –¢–µ–∫—Å—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–∞.

    Returns
    -------
    list of float
        –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏.
    """
    return list(map(float, re.findall(r"[-+]?\d*\.\d+|\d+", text)))


def evaluate_answers(history_data, validation_data):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏
    —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞.

    Parameters
    ----------
    history_data : list of dict
        –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏–∑ history.json.
    validation_data : dict
        –°–ª–æ–≤–∞—Ä—å —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.

    Returns
    -------
    float
        –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (—Ç–æ—á–Ω–æ—Å—Ç—å).
    """
    correct_count = 0
    total_count = 0

    for entry in history_data:
        question = entry["question"]
        generated_code = entry["code"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        if question not in validation_data:
            print(f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {question}")
            continue

        reference_code = validation_data[question]
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å: {question}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        generated_result = execute_code(generated_code)
        expected_result = execute_code(reference_code)

        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {generated_result}")
        if generated_result.find(":") != -1:
            generated_result = generated_result.split(":", 1)[1]

        generated_result = extract_numbers(generated_result)[0]
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        match = compare_results(generated_result, expected_result)

        print(
            f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\
                {generated_result}"
        )
        print(f"–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_result}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {'‚úÖ' if match else '‚ùå'}")

        total_count += 1
        if match:
            correct_count += 1

    accuracy = correct_count / total_count if total_count > 0 else 0
    print(f"\nüìä –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%} ({correct_count}/{total_count})")
    return accuracy


if __name__ == "__main__":
    history_data = load_jsonl("./data/history.json")
    validation_data = load_validation_answers("./data/validate_answer.json")

    evaluate_answers(history_data, validation_data)
