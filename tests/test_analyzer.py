# tests/test_analyzer.py

import pytest
from app.analyzer import DataAnalyzer


# @pytest.fixture
# def analyzer():
#     model = LocalModel()
#     data_loader = DataLoader("./data/freelancer_earnings.csv")
#     return DataAnalyzer(model, data_loader)


@pytest.mark.parametrize(
    "question, expected",
    [
        (
            "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, —Å—á–∏—Ç–∞—é—â–∏—Ö —Å–µ–±—è —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏, –≤—ã–ø–æ–ª–Ω–∏–ª –º–µ–Ω–µ–µ 100 –ø—Ä–æ–µ–∫—Ç–æ–≤?",
            "33.85%",
        ),
        (
            "–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ —á–∞—â–µ –ø–æ–ª—É—á–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (>= 4.5)?",
            "Intermediate",
        ),
    ],
)
def test_analyzer_with_mocked_model(
    mocked_model, data_loader, question, expected
):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç DataAnalyzer —Å –∑–∞–º–æ–∫–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é.
    """
    analyzer = DataAnalyzer(model_loader=mocked_model, data_loader=data_loader)

    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å: {question}")
    actual_answer = analyzer.ask(question)

    print(f"‚û°Ô∏è –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã:\n{actual_answer}")

    assert (
        expected.lower() in actual_answer.lower()
    ), f"–û—Ç–≤–µ—Ç '{actual_answer}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '{expected}'"
